(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[40],{"5T7+":function(s,n,a){"use strict";a.r(n);var l=a("q1tI"),p=a.n(l);n["default"]=function(){return p.a.createElement("section",{dangerouslySetInnerHTML:{__html:'<html><head></head><body><h2 id="types"><a class="anchor" href="#types"></a>Types</h2>\n<h3 id="basic"><a class="anchor" href="#basic"></a>Basic</h3>\n<h4>boolean</h4>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> bool: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;\n</code></pre>\n<h4>number</h4>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> decimal: <span class="hljs-built_in">number</span> = <span class="hljs-number">61453</span>;\n<span class="hljs-keyword">const</span> hex: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xf00d</span>;\n<span class="hljs-keyword">const</span> binary: <span class="hljs-built_in">number</span> = <span class="hljs-number">0b1010</span>;\n<span class="hljs-keyword">const</span> octal: <span class="hljs-built_in">number</span> = <span class="hljs-number">0o744</span>;\n</code></pre>\n<h4>string</h4>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> str: <span class="hljs-built_in">string</span> = <span class="hljs-string">&apos;Hello, world!&apos;</span>;\n</code></pre>\n<h4>array</h4>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> list: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> numbers: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> tuple: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&apos;Jone&apos;</span>, <span class="hljs-number">18</span>];\n</code></pre>\n<h4>Void</h4>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> fn = (): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> {};\n</code></pre>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> x: <span class="hljs-built_in">void</span> = <span class="hljs-literal">null</span>;\n<span class="hljs-keyword">const</span> y: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>;\n</code></pre>\n<h4>null and undefined</h4>\n<pre><code class="language-typescript"><span class="hljs-comment">// --strictNullChecks</span>\n<span class="hljs-keyword">let</span> num: <span class="hljs-built_in">number</span> | <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span>;\nnum = <span class="hljs-number">1</span>;\nnum = <span class="hljs-literal">undefined</span>;\nnum = <span class="hljs-literal">null</span>;\n</code></pre>\n<h3 id="type-assertions"><a class="anchor" href="#type-assertions"></a>Type assertions</h3>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> text: <span class="hljs-built_in">any</span> = <span class="hljs-string">&apos;Hello, world!&apos;</span>;\n<span class="hljs-keyword">const</span> length1: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;text).length;\n<span class="hljs-keyword">const</span> length2: <span class="hljs-built_in">number</span> = (text <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).length;\n</code></pre>\n<h3 id="readonly"><a class="anchor" href="#readonly"></a>Readonly</h3>\n<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> Point {\n    readonly x: <span class="hljs-built_in">number</span>;\n    readonly y: <span class="hljs-built_in">number</span>;\n}\n\n<span class="hljs-keyword">const</span> numbers: ReadonlyArray&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> num1 = numbers; <span class="hljs-comment">// error!</span>\n<span class="hljs-keyword">const</span> num2 = numbers <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>[]; <span class="hljs-comment">// works!</span>\n</code></pre>\n<h3 id="function"><a class="anchor" href="#function"></a>Function</h3>\n<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> Fn {\n    (source: <span class="hljs-built_in">string</span>, subString: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span>;\n}\n</code></pre>\n<h3 id="class"><a class="anchor" href="#class"></a>Class</h3>\n<h4>Implementing an interface</h4>\n<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> ClockInterface {\n    currentTime: <span class="hljs-built_in">Date</span>;\n    setTime(d: <span class="hljs-built_in">Date</span>): <span class="hljs-built_in">void</span>;\n    <span class="hljs-keyword">new</span> (hour: <span class="hljs-built_in">number</span>, minute: <span class="hljs-built_in">number</span>);\n}\n\n<span class="hljs-keyword">class</span> Clock <span class="hljs-keyword">implements</span> ClockInterface {\n    currentTime: <span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();\n    setTime(d: <span class="hljs-built_in">Date</span>) {\n        <span class="hljs-keyword">this</span>.currentTime = d;\n    }\n    <span class="hljs-keyword">constructor</span>(<span class="hljs-params">h: <span class="hljs-built_in">number</span>, m: <span class="hljs-built_in">number</span></span>) { }\n}\n</code></pre>\n<h4>Extending Interfaces</h4>\n<pre><code class="language-typescript"><span class="hljs-keyword">interface</span> Shape {\n    color: <span class="hljs-built_in">string</span>;\n}\n\n<span class="hljs-keyword">interface</span> Square <span class="hljs-keyword">extends</span> Shape {\n    sideLength: <span class="hljs-built_in">number</span>;\n}\n</code></pre>\n<h3 id="namespacing"><a class="anchor" href="#namespacing"></a>Namespacing</h3>\n<pre><code class="language-typescript"><span class="hljs-keyword">namespace</span> Validation {\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> StringValidator {\n      isAcceptable(s: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span>;\n  }\n  <span class="hljs-keyword">const</span> lettersRegexp = <span class="hljs-regexp">/^[A-Za-z]+$/</span>;\n}\n\n<span class="hljs-keyword">const</span> validators: { [s: <span class="hljs-built_in">string</span>]: Validation.StringValidator; } = {};\n</code></pre>\n<h3 id="declare"><a class="anchor" href="#declare"></a>Declare</h3>\n<pre><code class="language-typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> jQuery: <span class="hljs-function">(<span class="hljs-params">selector: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">any</span>;\n\njQuery(<span class="hljs-string">&apos;#foo&apos;</span>);\n</code></pre>\n</body></html>'},className:"markdown-body"})}}}]);