(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[39],{flBc:function(s,a,n){"use strict";n.r(a);var e=n("q1tI"),p=n.n(e);a["default"]=function(){return p.a.createElement("section",{dangerouslySetInnerHTML:{__html:'<html><head></head><body><h2 id="public-private-and-protected-modifiers"><a class="anchor" href="#public-private-and-protected-modifiers"></a>Public, private, and protected modifiers</h2>\n<p><em><a href="http://www.typescriptlang.org/docs/handbook/classes.html#public-private-and-protected-modifiers">typescript-handbook</a></em></p>\n<h3 id="public"><a class="anchor" href="#public"></a>Public</h3>\n<p>by default</p>\n<h3 id="private"><a class="anchor" href="#private"></a>Private</h3>\n<p><code>private</code>, cannot be accessed from outside of its containing class.</p>\n<h3 id="protected"><a class="anchor" href="#protected"></a>Protected</h3>\n<p><code>protected</code>, can also be accessed within deriving classes.</p>\n<p><a href="https://codesandbox.io/s/typescript-9eywy">sandbox</a></p>\n<pre><code class="language-ts"><span class="hljs-keyword">class</span> Component {\n  <span class="hljs-keyword">protected</span> props: <span class="hljs-built_in">any</span>;\n  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">constructor</span>(<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) {\n    <span class="hljs-keyword">this</span>.props = props;\n  }\n}\n\n<span class="hljs-keyword">class</span> MyComponent <span class="hljs-keyword">extends</span> Component {\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">constructor</span>(<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) {\n    <span class="hljs-keyword">super</span>(props);\n  }\n\n  <span class="hljs-keyword">public</span> test() {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.props;\n  }\n}\n</code></pre>\n<h3 id="readonly"><a class="anchor" href="#readonly"></a>Readonly</h3>\n<p><code>readonly</code> properties must be initialized at their declaration or in the constructor.</p>\n<h3 id="getset"><a class="anchor" href="#getset"></a>Get/Set</h3>\n<p><code>getters</code>/<code>setters</code> as a way of intercepting accesses to a member of an object.</p>\n<h3 id="static"><a class="anchor" href="#static"></a>Static</h3>\n<p><code>static</code> on the origin, as it&#x2019;s a general value for all grids. Each instance accesses this value through prepending the name of the class.</p>\n<h3 id="abstract"><a class="anchor" href="#abstract"></a>Abstract</h3>\n<p><code>abstract</code> keyword is used to define abstract classes as well as abstract methods within an abstract class.</p>\n<p><a href="https://codesandbox.io/s/typescript-1kpzw">sandbox</a></p>\n<pre><code class="language-ts"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> Component {\n  <span class="hljs-keyword">protected</span> props: <span class="hljs-built_in">any</span>;\n  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">constructor</span>(<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) {\n    <span class="hljs-keyword">this</span>.props = props;\n  }\n  \n  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> render(): <span class="hljs-built_in">void</span>;\n}\n\n<span class="hljs-keyword">class</span> MyComponent <span class="hljs-keyword">extends</span> Component {\n  <span class="hljs-keyword">public</span> <span class="hljs-keyword">constructor</span>(<span class="hljs-params">props: <span class="hljs-built_in">any</span></span>) {\n    <span class="hljs-keyword">super</span>(props);\n  }\n\n  <span class="hljs-keyword">public</span> render() {\n    <span class="hljs-keyword">const</span> { name } = <span class="hljs-keyword">this</span>.props;\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&apos;Hello, &apos;</span>.concat(name, <span class="hljs-string">&apos;!&apos;</span>);\n  }\n}\n</code></pre>\n</body></html>'},className:"markdown-body"})}}}]);