(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[16],{k5DC:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return o});t("q1tI");var a=t("7ljp");function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}const r={},i="wrapper";function o({components:e,...n}){return Object(a["a"])(i,l({},r,n,{components:e,mdxType:"MDXLayout"}),Object(a["a"])("h2",null,"Promise"),Object(a["a"])("h3",null,"states"),Object(a["a"])("p",null,"A ",Object(a["a"])("inlineCode",{parentName:"p"},"Promise")," is in one of these states:"),Object(a["a"])("ul",null,Object(a["a"])("li",{parentName:"ul"},Object(a["a"])("inlineCode",{parentName:"li"},"pending"),": initial state, neither fulfilled and rejected."),Object(a["a"])("li",{parentName:"ul"},Object(a["a"])("inlineCode",{parentName:"li"},"fulfilled"),": completed successfully"),Object(a["a"])("li",{parentName:"ul"},Object(a["a"])("inlineCode",{parentName:"li"},"rejected"),": operation failed")),Object(a["a"])("h3",null,"then and catch return promises"),Object(a["a"])("p",null,Object(a["a"])("inlineCode",{parentName:"p"},".then()")," and ",Object(a["a"])("inlineCode",{parentName:"p"},".catch()")," return ",Object(a["a"])("inlineCode",{parentName:"p"},"promises"),", they can be chained."),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{className:"language-JavaScript"}),"const promise = new Promise(function (resolve) {\n    resolve(100)\n})\n\npromise.then(function (value) {\n    return value * 2\n})\n\npromise.then(function (value) {\n    return value * 2\n})\n\npromise.then(function (value) {\n    console.log(value)\n})\n")),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{}),"// result: 100\n")),Object(a["a"])("h3",null,"Promise.all()"),Object(a["a"])("p",null,"return a promise that either ",Object(a["a"])("inlineCode",{parentName:"p"},"fulfills")," when:"),Object(a["a"])("ul",null,Object(a["a"])("li",{parentName:"ul"},Object(a["a"])("inlineCode",{parentName:"li"},"all")," promises ",Object(a["a"])("inlineCode",{parentName:"li"},"fulfilled")),Object(a["a"])("li",{parentName:"ul"},"or ",Object(a["a"])("inlineCode",{parentName:"li"},"one")," of promises ",Object(a["a"])("inlineCode",{parentName:"li"},"rejects"))),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{className:"language-JavaScript"}),"function setTime (time) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(time)\n        }, time)\n    })\n}\n\nPromise.all([setTime(1), setTime(100), setTime(200)])\n    .then(value => {\n        console.log(value)\n    })\n")),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{}),"// result: [1, 100, 200]\n")),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{className:"language-JavaScript"}),"function fail (time) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            reject(time)\n        }, time)\n    })\n}\n\nPromise.all([setTime(1), fail(100), setTime(200)])\n    .then(value => {\n        console.log(value)\n    })\n    .catch((err) => {\n        console.error(err)\n    })\n")),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{}),"// result: Error(100)\n")),Object(a["a"])("h3",null,"Promise.race()"),Object(a["a"])("p",null,"return a promise that either ",Object(a["a"])("inlineCode",{parentName:"p"},"fulfills")," when:"),Object(a["a"])("ul",null,Object(a["a"])("li",{parentName:"ul"},"one of promise ",Object(a["a"])("inlineCode",{parentName:"li"},"fulfilled")," or ",Object(a["a"])("inlineCode",{parentName:"li"},"rejects"))),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{className:"language-JavaScript"}),"const rabit = new Promise(resolve => {\n    setTimeout(() => {\n        console.log('rabit race!')\n        resolve('rabit win!')\n    }, 1000)\n})\n\nconst turtle = new Promise(resolve => {\n    setTimeout(() => {\n        console.log('turtle race!')\n        resolve('turtle win!')\n    }, 10)\n})\n\nPromise.race([rabit, turtle])\n    .then(result => {\n        console.log(result)\n    })\n")),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{}),"// turtle race!\n// turtle win!\n// rabit race!\n")),Object(a["a"])("h3",null,"Promise.resolve()"),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{className:"language-JavaScript"}),"const task1 = value => value + 1\nconst task2 = value => value + 2\nconst task3 = value => {\n    console.log(value + 3)\n}\n\nPromise.resolve(1).then(task1).then(task2).then(task3)\n")),Object(a["a"])("pre",null,Object(a["a"])("code",l({parentName:"pre"},{}),"// result: 7\n")))}o.isMDXComponent=!0}}]);