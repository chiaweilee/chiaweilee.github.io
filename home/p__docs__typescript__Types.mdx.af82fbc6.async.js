(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[56],{mg7d:function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return s});a("q1tI");var t=a("7ljp");function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},r.apply(this,arguments)}const c={},l="wrapper";function s({components:e,...n}){return Object(t["a"])(l,r({},c,n,{components:e,mdxType:"MDXLayout"}),Object(t["a"])("h2",null,"Types"),Object(t["a"])("h3",null,"Basic"),Object(t["a"])("h4",null,"boolean"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"const bool: boolean = false;\n")),Object(t["a"])("h4",null,"number"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"const decimal: number = 61453;\nconst hex: number = 0xf00d;\nconst binary: number = 0b1010;\nconst octal: number = 0o744;\n")),Object(t["a"])("h4",null,"string"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"const str: string = 'Hello, world!';\n")),Object(t["a"])("h4",null,"array"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"const list: number[] = [1, 2, 3];\nconst numbers: Array<number> = [1, 2, 3];\nconst tuple: [string, number] = ['Jone', 18];\n")),Object(t["a"])("h4",null,"Void"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"const fn = (): void => {};\n")),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"const x: void = null;\nconst y: void = undefined;\n")),Object(t["a"])("h4",null,"null and undefined"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"// --strictNullChecks\nlet num: number | null | undefined;\nnum = 1;\nnum = undefined;\nnum = null;\n")),Object(t["a"])("h3",null,"Type assertions"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"const text: any = 'Hello, world!';\nconst length1: number = (<string>text).length;\nconst length2: number = (text as string).length;\n")),Object(t["a"])("h3",null,"Readonly"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"interface Point {\n  readonly x: number;\n  readonly y: number;\n}\n\nconst numbers: ReadonlyArray<number> = [1, 2, 3];\nconst num1 = numbers; // error!\nconst num2 = numbers as number[]; // works!\n")),Object(t["a"])("h3",null,"Function"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"interface Fn {\n  (source: string, subString: string): boolean;\n}\n")),Object(t["a"])("h3",null,"Class"),Object(t["a"])("h4",null,"Implementing an interface"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"interface ClockInterface {\n  currentTime: Date;\n  setTime(d: Date): void;\n  new (hour: number, minute: number);\n}\n\nclass Clock implements ClockInterface {\n  currentTime: Date = new Date();\n  setTime(d: Date) {\n    this.currentTime = d;\n  }\n  constructor(h: number, m: number) {}\n}\n")),Object(t["a"])("h4",null,"Extending Interfaces"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"interface Shape {\n  color: string;\n}\n\ninterface Square extends Shape {\n  sideLength: number;\n}\n")),Object(t["a"])("h3",null,"Namespacing"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"namespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n  const lettersRegexp = /^[A-Za-z]+$/;\n}\n\nconst validators: { [s: string]: Validation.StringValidator } = {};\n")),Object(t["a"])("h3",null,"Declare"),Object(t["a"])("pre",null,Object(t["a"])("code",r({parentName:"pre"},{className:"language-typescript"}),"declare var jQuery: (selector: string) => any;\n\njQuery('#foo');\n")))}s.isMDXComponent=!0}}]);