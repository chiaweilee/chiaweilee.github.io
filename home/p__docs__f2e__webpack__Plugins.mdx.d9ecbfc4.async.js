(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[39],{"0meR":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return p});a("q1tI");var r=a("7ljp");function t(){return t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},t.apply(this,arguments)}const l={},c="wrapper";function p({components:e,...n}){return Object(r["a"])(c,t({},l,n,{components:e,mdxType:"MDXLayout"}),Object(r["a"])("h2",null,"Plugins"),Object(r["a"])("h3",null,"BannerPlugin"),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.BannerPlugin(banner);\n// or\nnew webpack.BannerPlugin(options);\n")),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"{\n  banner: string | function, // the banner as string or function, it will be wrapped in a comment\n  raw: boolean, // if true, banner will not be wrapped in a comment\n  entryOnly: boolean, // if true, the banner will only be added to the entry chunks\n  test: string | RegExp | Array,\n  include: string | RegExp | Array,\n  exclude: string | RegExp | Array,\n}\n")),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"// string\nnew webpack.BannerPlugin({\n  banner: 'hello world'\n});\n\n// function\nnew webpack.BannerPlugin({\n  banner: (yourVariable) => { return `yourVariable: ${yourVariable}`; }\n});\n")),Object(r["a"])("h3",null,"ContextReplacementPlugin"),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.ContextReplacementPlugin(\n  /moment[/\\\\]locale$/,\n  /de|fr|hu/\n);\n")),Object(r["a"])("h3",null,"DefinePlugin"),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.DefinePlugin({\n    TWO: '1+1',\n    'typeof window': JSON.stringify('object'),\n    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n})\n")),Object(r["a"])("h3",null,"EnvironmentPlugin"),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.EnvironmentPlugin(['NODE_ENV', 'DEBUG']);\n")),Object(r["a"])("p",null,"equivalent to ",Object(r["a"])("inlineCode",{parentName:"p"},"DefinePlugin")),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.DefinePlugin({\n  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)\n});\n")),Object(r["a"])("p",null,Object(r["a"])("em",{parentName:"p"},"Variables coming from process.env are always ",Object(r["a"])("inlineCode",{parentName:"em"},"strings"),".")),Object(r["a"])("h3",null,"IgnorePlugin"),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.IgnorePlugin(requestRegExp, [contextRegExp]);\n")),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/);\n")),Object(r["a"])("p",null,Object(r["a"])("em",{parentName:"p"},"...which means \"any require statement matching './locale' from any directories ending with 'moment' will be ignored.")),Object(r["a"])("h3",null,"ProvidePlugin"),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.ProvidePlugin({\n  $: 'jquery',\n  jQuery: 'jquery'\n});\n")),Object(r["a"])("pre",null,Object(r["a"])("code",t({parentName:"pre"},{className:"language-JavaScript"}),"new webpack.ProvidePlugin({\n  _map: ['lodash', 'map']\n});\n")))}p.isMDXComponent=!0}}]);